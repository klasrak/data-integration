// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and provides a JWT to Authorize API calls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Provides a JSON Web Token",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helpers.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/helpers.Tokens"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/create": {
            "post": {
                "description": "Create negativation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create negativation",
                "operationId": "Create",
                "parameters": [
                    {
                        "description": "Add negativation",
                        "name": "negativation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helpers.Negativation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data_integration.Negativation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/delete/{id}": {
            "delete": {
                "description": "Delete negativation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete negativation",
                "operationId": "Delete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Negativation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/fetch": {
            "get": {
                "description": "Fetch data from Legacy API and saves into mongodb",
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch data from Legacy API",
                "operationId": "Fetch",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/helpers.Negativation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/get": {
            "get": {
                "description": "Get all negativations from database",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all negativations",
                "operationId": "GetAll",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data_integration.Negativation"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/get/{id}": {
            "get": {
                "description": "Get a negativation by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a negativation by ID",
                "operationId": "GetByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Negativation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data_integration.Negativation"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/get{customerDocument}": {
            "get": {
                "description": "Get all negativations from a documentNumber",
                "produces": [
                    "application/json"
                ],
                "summary": "Get negativations",
                "operationId": "Get",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer document (CPF)",
                        "name": "customerDocument",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data_integration.Negativation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        },
        "/negativations/update/{id}": {
            "put": {
                "description": "Update negativation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update negativation",
                "operationId": "Update",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Negativation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Data to update",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helpers.Negativation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data_integration.Negativation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/helpers.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data_integration.Negativation": {
            "type": "object",
            "properties": {
                "companyDocument": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "customerDocument": {
                    "type": "string"
                },
                "debtDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inclusionDate": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "helpers.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "helpers.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "helpers.Negativation": {
            "type": "object",
            "properties": {
                "companyDocument": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "customerDocument": {
                    "type": "string"
                },
                "debtDate": {
                    "type": "string"
                },
                "inclusionDate": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "helpers.Tokens": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{"http"},
	Title:       "Data Integration API",
	Description: "Fetch data from a Legacy API and serve",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
